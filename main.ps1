class Question {
    [int]$id
    [string]$type = 'default' # Default = text answer; code = answer generated by a scriptblock; TODO: Add type setup where the preliminery would be the setup and the answer would be predefined.
    [string]$prompt
    [scriptblock]$preliminary = $null
    [object]$answer 
    [string]$hint = "There is no hint for this question, try harder!"

    Question([int]$id, [string]$type, [string]$prompt, [scriptblock]$preliminary, [object]$answer) {
        $this.id = $id
        $this.type = $type
        $this.prompt = $prompt
        $this.preliminary = $preliminary
        $this.answer = $answer
    }

        Question([int]$id, [string]$type, [string]$prompt, [scriptblock]$preliminary, [object]$answer, [string]$hint) {
        $this.id = $id
        $this.type = $type
        $this.prompt = $prompt
        $this.preliminary = $preliminary
        $this.answer = $answer
        $this.hint = $hint
    }

    [bool]CheckAnswer([string]$userInput) {
        try {
            if ($this.Type -eq 'code') {
                $preliminaryOutput = & $this.preliminary
                $this.answer = $preliminaryOutput.ToString().Trim()
            } 

        } catch {
            Write-Host "Error executing preliminary code. Please check the question setup."
        }
        
        if ($this.answer -eq "")
        {
            write-host "Error in getting answer for Question $($this.id)"
            $this.answer = "ERROR | Error getting the result for this question, please skip it"
            return $false
        }

        return $userInput.trim() -eq $this.answer.ToString().Trim()
    }
}

$questions = @(
    [Question]::new(0, 'code', 'What is the version of the command "get-member"?', { $(get-command "get-member").Version.ToString() }, ""),
    [Question]::new(1, 'default', 'What is MemberType of the CommandType member in the Get-Command output?', $null, "Property"),
    [Question]::new(2, 'default', 'What is the cmdlet behind the alias of the command "ls"', $null, 'get-childitem'),
    [Question]::new(3, 'code', 'How many aliases does Get-ChildItem has?', {$(Get-Alias -Definition Get-ChildItem).count}, ''),
    [Question]::new(4, 'code', 'What is the ModuleName of the command "get-member"', {get-command get-member | Select-Object -ExpandProperty ModuleName}, ''),
    [Question]::new(5, 'code', 'How many available commands in your machine has "Microsoft.PowerShell.Utility" as ther ModuleName?', { $(Get-command | Where-Object{$_.ModuleName -eq "Microsoft.PowerShell.Utility"}).Count }, ""),
    [Question]::new(6, 'default', 'What is the type of the output to the command "Get-Help cat" ', $null , 'PSCustomObject'), #{ $(get-help cat ).gettype().name }
    [Question]::new(7, 'code', 'What is the 77th char of the output to the command "Get-Help cat -full" ', { $(get-help cat -full | out-string)[77] }, ''),
    [Question]::new(8, 'code', 'What is the SHA1 has of "C:\Windows\notepad.exe"? ', { Get-FileHash  "C:\windows\notepad.exe" -Algorithm SHA1 | select-object -ExpandProperty Hash }, ''),
    [Question]::new(9, 'code', 'What is the character length of the Issuer''s distinguished name who Issued the certificate for "C:\Windows\notepad.exe"? ', { $(Get-AuthenticodeSignature C:\windows\notepad.exe).SignerCertificate.Issuer.trim().Length }, '', "Did you look within the SignerCertificate?")
    [Question]::new(10, 'code', 'What is the path name (commandline) of the service with the display name of Windows Update?', { Get-WmiObject win32_service | Where-Object{$_.name -eq "wuauserv"} | Select-Object -ExpandProperty PathName }, '', "WMI is the real deal")
    [Question]::new(11, 'code', 'What is the creation date of the process lsass.exe? Format: YYYYMMDDHHmmSS.sss ', { $date = Get-WmiObject win32_process | Where-Object {$_.name -eq "lsass.exe"} | Select-Object -ExpandProperty CreationDate | out-string; $dotPosition = $date.IndexOf('.'); return $date.Substring(0,$dotPosition+ 4)}, '', "WMI is the real deal. Here is an example for an answer '20240131102618.284'")
    [Question]::new(12, 'default', 'Copy and paste this hashtable to your own terminal, find the hidden message:
    $hashtable = @{
    "g7S" = "G"
    "t7H" = "e"
    "m5M" = "l"
    "v3F" = "o"
    "e1U" = "T"
    "i6Q" = "u"
    "q4J" = "s"
    "97Z" = "g"
    "w5E" = "P"
    "j3P" = "o"
    "d2V" = "o"
    "s6I" = "r"
    "w8D" = "e"
    "l9N" = "l"
    "k2O" = "Y"
    "*6c" = "g"
    "p1K" = "h"
    "h0R" = "r"
    "f4T" = "o"
    "c8W" = "L"
    "b9X" = "a"
    "a3Y" = "n"
    "n8L" = "e"
    "u0G" = "w"
    "z1A" = "M"
    "xwB" = "a"
    "xtC" = "k"
    "@1b" = "a"
    "_4a" = "u"
    "!5d" = "e"
}
', $null , 'MakePowershellYourGoToLanguage') # ($hashtable.GetEnumerator() | Sort-Object Name -Descending).Value -join ''
[Question]::new(13, 'default', 'My name is Omri, and I love vowels. If you''d remove all other characters from this very question, you will get your answer!', $null, 'aeiOiaIoeoeIoueoeaoeaaeoieueioouieouae', "Either Regex or '-replace' would do the trick!") #-replace '[^aeiouAEIOU]', ''
)

function Start-TutorialGame {
    $currentIndex = 0
    $answersStatus = @{}

      do {
        $currentQuestion = $questions[$currentIndex]
        # TODO: run preliminary setup
        Write-Host "Question #$($currentQuestion.id):`n$($currentQuestion.prompt)" -foregroundColor Cyan
        $userInput = Read-Host "Your answer (type 'skip' to skip/'hint' for hint)"

        if ($userInput -eq 'PowershellGod') {
            $password = Read-Host -AsSecureString "What is the password" 
            $bstr = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($password)
            $InsecureString = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($bstr)
            if ($InsecureString -eq "shlomo")
            {
                $num = Read-Host "How many questions do you want to reveal? (ID of last question + 1)"
                if ($num -eq "all")
                {$num = $questions.Count}
                for ($i =0;$i -lt $num; $i++) {
                    $q = $questions[$i]
                    if ($q.type -eq 'code') {
                        # Execute the preliminary scriptblock to get the answer
                        try {
                            $preliminaryOutput = & $q.preliminary
                            $q.answer = $preliminaryOutput.ToString().Trim()
                        } catch {
                            Write-Host "Error executing code for question $($q.id)" -ForegroundColor Red
                            continue
                        }
                }
                    Write-Host "Question $($q.id): $($q.prompt)`nAnswer   $($q.id): $($q.answer)" -ForegroundColor Green
            }
            # break # Exit the loop after revealing all answers
            }
            elseif ($InsecureString -eq "skipto")
            {
                [int] $currentindex = Read-Host "What is the question number you want to skip to?"
            }
 
        }
        
        elseif ($userInput -eq 'skip') {
            Write-Host "Question skipped." -ForegroundColor Yellow
            $answersStatus[$currentQuestion.id] = 'Skipped'
            $currentIndex++
        } elseif ($userInput -eq "hint")
        {
            # Write-Host "Are you sure you want a hint? [yes/no]" -ForegroundColor Yellow
            Write-Host "The hint is:`n'$($currentQuestion.hint)'" -ForegroundColor Yellow
        }
        elseif ($currentQuestion.CheckAnswer($userInput)) {
            $answersStatus[$currentQuestion.id] = 'Correct'
            $currentIndex++
            Write-Host "Correct! Next is question number $currentIndex!" -ForegroundColor Green
        } else {
            if ($currentQuestion.answer -match "^ERROR \|")
            {
                Write-Host -ForegroundColor Orange $currentQuestion.answer
                $answersStatus[$currentQuestion.id] = 'Error'
            }
            else 
            {
            Write-Host "Incorrect. Please try again or type 'skip' to skip or 'hint' for a hint." -ForegroundColor Red
            $answersStatus[$currentQuestion.id] = 'Incorrect'
            }
        }
    } while ($currentIndex -lt $questions.Length)

    Write-Host "Tutorial completed. Review your answers:" -ForegroundColor Green
    $answersStatus.GetEnumerator() | ForEach-Object { Write-Host "Question $($_.Key): $($_.Value)" }
}

# Start the game
Start-TutorialGame
